# main.py
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Updater, CommandHandler, MessageHandler, Filters, CallbackContext, CallbackQueryHandler
import logging
import csv
import os

# INSERISCI QUI IL TUO TOKEN TELEGRAM
TOKEN = "PASTE_YOUR_BOT_TOKEN_HERE"

# Logging per debug
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)

DATA_FILE = "feedback.csv"
if not os.path.exists(DATA_FILE):
    with open(DATA_FILE, mode='w', newline='') as f:
        writer = csv.writer(f)
        writer.writerow(["file_id", "decision"])  # intestazione

# Funzione /start
def start(update: Update, context: CallbackContext):
    update.message.reply_text("Ciao! Inviami una foto e ti chieder√≤ se ti piace oppure no.")

# Gestione foto
def handle_photo(update: Update, context: CallbackContext):
    file_id = update.message.photo[-1].file_id
    context.user_data['last_photo'] = file_id
    keyboard = [
        [
            InlineKeyboardButton("üëç Mi piace", callback_data='like'),
            InlineKeyboardButton("üëé Non mi piace", callback_data='dislike')
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    context.bot.send_photo(chat_id=update.effective_chat.id, photo=file_id, caption="Ti piace questa ragazza?", reply_markup=reply_markup)

# Callback dei bottoni
def button(update: Update, context: CallbackContext):
    query = update.callback_query
    query.answer()
    choice = query.data
    file_id = context.user_data.get('last_photo')
    if file_id:
        with open(DATA_FILE, mode='a', newline='') as f:
            writer = csv.writer(f)
            writer.writerow([file_id, choice])
    query.edit_message_caption(caption=f"Hai scelto: {'‚ù§Ô∏è' if choice == 'like' else '‚ùå'}")

# Main
if __name__ == '__main__':
    updater = Updater(TOKEN, use_context=True)
    dp = updater.dispatcher
    dp.add_handler(CommandHandler("start", start))
    dp.add_handler(MessageHandler(Filters.photo, handle_photo))
    dp.add_handler(CallbackQueryHandler(button))
    updater.start_polling()
    updater.idle()
